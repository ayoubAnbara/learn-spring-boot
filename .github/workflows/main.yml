name: Build & Deploy App

on:
  push:
    branches:
      - main

env:
#  applicationfolder: ./spring-boot-folder
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}


jobs:
  build:
    name: build app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout Repository

      - name: setup jdk
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Unit Test
        run: mvn -B test -Dspring.profiles.active=staging --file pom.xml

      - name: Build and Package Maven
        run: |
         mvn -B package -Dspring.profiles.active=staging --file pom.xml
         aws s3 cp target/*.jar s3://${{ secrets.AWS_S3_BUCKET }}/
         echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key 
         ssh -o StrictHostKeyChecking=no -i private_key ${{secrets.SSH_USER_NAME}}@${{secrets.SSH_HOST}} '
               touch test_file.txt
               '
#         mkdir staging && cp target/*.jar staging

#      - uses: actions/upload-artifact@v3
#        with:
#          name: Package
#          path: staging
#        working-directory: ${{ env.applicationfolder }}

      #      - name: Setup Docker Image # although sometimes docker is overwintering
      #        uses: actions/build-push-action@v2
      #        with:
      #          context: .
      #          dockerfile: Dockerfile # VMware recommend to not write Dockerfile use spring-boot:build-image plugin
      #          push: false
      #          tags: ${{secrets.AWS_ACCESS_KEY_ID}}/learn-spring-boot:${{ env.sha_short }}
#      - uses: actions/checkout@master
#      - uses: shallwefootball/s3-upload-action@master
#        with:
#          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY}}
#          aws_bucket: ${{ secrets.AWS_S3_BUCKET }}
#          source_dir: 'staging'



#      - name: Upload Artifact to s3
#        working-directory: ${{ env.applicationfolder }}/target
#        run: aws s3 cp *.jar s3://${{ env.S3BUCKET }}/